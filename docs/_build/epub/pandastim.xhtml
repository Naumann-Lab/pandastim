<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>pandastim package</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="pandastim-package">
<h1>pandastim package</h1>
<section id="subpackages">
<h2>Subpackages</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="pandastim.gui.xhtml">pandastim.gui package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="pandastim.gui.xhtml#submodules">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="pandastim.gui.xhtml#module-pandastim.gui.pandas_gui">pandastim.gui.pandas_gui module</a></li>
<li class="toctree-l2"><a class="reference internal" href="pandastim.gui.xhtml#module-pandastim.gui">Module contents</a></li>
</ul>
</li>
</ul>
</div>
</section>
<section id="submodules">
<h2>Submodules</h2>
</section>
<section id="module-pandastim.stimuli">
<span id="pandastim-stimuli-module"></span><h2>pandastim.stimuli module</h2>
<p>pandastim/stimuli.py
Classes to present visual stimuli in pandastim (subclasses of ShowBase, which 
implements the main event loop in panda3d).</p>
<p>Part of pandastim package: <a class="reference external" href="https://github.com/EricThomson/pandastim">https://github.com/EricThomson/pandastim</a></p>
<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">Behavior</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimuli</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rad_stack</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.StimulusSequencing" title="pandastim.stimuli.StimulusSequencing"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.StimulusSequencing</span></code></a></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior.calibration_stimulus">
<span class="sig-name descname"><span class="pre">calibration_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">toggle</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior.change_stimulus">
<span class="sig-name descname"><span class="pre">change_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">new_stimulus</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior.end_experiment">
<em class="property"><span class="pre">static</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">end_experiment</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Behavior.update_stimulus">
<span class="sig-name descname"><span class="pre">update_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">BehavioralStimuliTesting</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimuli</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rad_stack</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.StimulusSequencing" title="pandastim.stimuli.StimulusSequencing"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.StimulusSequencing</span></code></a></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.calibration_stimulus">
<span class="sig-name descname"><span class="pre">calibration_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">toggle</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.change_stimulus">
<span class="sig-name descname"><span class="pre">change_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">new_stimulus</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.clear_cards">
<span class="sig-name descname"><span class="pre">clear_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.end_experiment">
<span class="sig-name descname"><span class="pre">end_experiment</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.run_centering">
<span class="sig-name descname"><span class="pre">run_centering</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.run_radial">
<span class="sig-name descname"><span class="pre">run_radial</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">radial_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.stuffAndThings">
<span class="sig-name descname"><span class="pre">stuffAndThings</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BehavioralStimuliTesting.update_stimulus">
<span class="sig-name descname"><span class="pre">update_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularFixed">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">BinocularFixed</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stim</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_angles</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">strip_angle</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">position</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">strip_width</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">4</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.BinocularMoving" title="pandastim.stimuli.BinocularMoving"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.BinocularMoving</span></code></a></p>
<p>Presents binocular stim class without any motion.
Most useful for testing stimuli. Obviously no need to set fps high.</p>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularMoving">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">BinocularMoving</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_angles</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">strip_angle</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">position</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">velocities</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">strip_width</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">4</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'BinocularDrift'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>Show binocular drifting textures forever.
Takes in texture object and other parameters, and shows texture drifting indefinitely.</p>
<dl class="simple">
<dt>Usage:</dt><dd><dl class="simple">
<dt>BinocularDrift(texture_object,</dt><dd><p>stim_angles = (0, 0),
strip_angle = 0,
position = (0,0),
velocities = (0,0),
strip_width = 2,
window_size = 512,
window_name = ‘FunStim’,
profile_on  = False)</p>
</dd>
</dl>
</dd>
<dt>Note(s):</dt><dd><ul class="simple">
<li><p>angles are (left_texture_angle, right_texture_angle): &gt;0 is cw, &lt;0 ccw</p></li>
<li><p>Make texture_size a power of 2: this makes the GPU happier.</p></li>
<li><p>position is x,y in card-based coordinates (from [-1 1]), so (.5, .5) will be in middle of top right quadrant</p></li>
<li><p>Velocity is in card-based units, so 1.0 is the entire window width (i.e., super-fast).</p></li>
<li><p>strip_width is just the width of the strip down the middle. It can be 0. Even is better.</p></li>
<li><p>The texture array can be 2d (gray) or NxNx3 (rgb) with unit8 or uint16 elements.</p></li>
</ul>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularMoving.left_texture_update">
<span class="sig-name descname"><span class="pre">left_texture_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularMoving.right_texture_update">
<span class="sig-name descname"><span class="pre">right_texture_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularMoving.textures_update">
<span class="sig-name descname"><span class="pre">textures_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.BinocularMoving.trs_transform">
<span class="sig-name descname"><span class="pre">trs_transform</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>trs = translate rotate scale transform for mask stage
rdb contributed to this code</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">ClosedLoopStimChoice</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">input_textures</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">def_freq</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">32</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">def_center_width</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">16</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scale</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">8</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">60</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rot_offset</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">-</span> <span class="pre">90</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">save_path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">win_pos</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(2400,</span> <span class="pre">270)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'Pandastim'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">live_update</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fish_id</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fish_age</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">gui</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">publisher_port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">5009</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>closed loop stimuli</p>
<p>this version only updates when told to do so</p>
<p>stimuli contains possible stim choices</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.clear_cards">
<span class="sig-name descname"><span class="pre">clear_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Clear cards when new stimulus: stim-class sensitive</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.create_cards">
<span class="sig-name descname"><span class="pre">create_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create cards: these are panda3d objects that are required for displaying textures.
You can’t just have a disembodied texture. In pandastim (at least for now) we are
only showing 2d projections of textures, so we use cards.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.create_next_texture">
<span class="sig-name descname"><span class="pre">create_next_texture</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimulus</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.create_texture_stages">
<span class="sig-name descname"><span class="pre">create_texture_stages</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create the texture stages: these are basically textures that you can apply
to cards (sometimes mulitple textures at the same time – is useful with
masks).</p>
<p>For more on texture stages:
<a class="reference external" href="https://docs.panda3d.org/1.10/python/programming/texturing/multitexture-introduction">https://docs.panda3d.org/1.10/python/programming/texturing/multitexture-introduction</a></p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.enforce_stationary">
<span class="sig-name descname"><span class="pre">enforce_stationary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stat_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.move_textures">
<span class="sig-name descname"><span class="pre">move_textures</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.save">
<span class="sig-name descname"><span class="pre">save</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimulus</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.set_texture_stages">
<span class="sig-name descname"><span class="pre">set_texture_stages</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Add texture stages to cards</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.set_transforms">
<span class="sig-name descname"><span class="pre">set_transforms</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Set up the transforms to apply to textures/cards (e.g., rotations/scales)
This is different from the framewise movement handled by the task manager</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.stimulus_finisher">
<span class="sig-name descname"><span class="pre">stimulus_finisher</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">max_time_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.texture_creater">
<em class="property"><span class="pre">static</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">texture_creater</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">inputs</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.ClosedLoopStimChoice.trs_transform">
<span class="sig-name descname"><span class="pre">trs_transform</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>trs = translate-rotate-scale transform for mask stage
panda3d developer rdb contributed to this code</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">InputControlParams</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_angles</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">initial_angle</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">initial_position</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">velocities</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">strip_width</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">4</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'position</span> <span class="pre">control'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">save_path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>Input signal sends in x, y, theta values for binocular stimuli to control
those parameters of the stim in real time. Need to expand to single texture.</p>
<dl class="simple">
<dt>Usage:</dt><dd><dl class="simple">
<dt>InputControlParams(texture_object,</dt><dd><p>stim_angles = (0, 0),
strip_angle = 0,
position = (0,0),
velocities = (0,0),
strip_width = 2,
window_size = 512,
window_name = ‘FunStim’,
profile_on  = False)</p>
</dd>
</dl>
</dd>
<dt>Note(s):</dt><dd><ul class="simple">
<li><p>angles are relative to strip angle</p></li>
<li><p>position is x,y in card-based coordinates (from [-1 1]), so (.5, .5) will be in middle of top right quadrant</p></li>
<li><p>Velocity is in same direction as angle, and units of window size (so 1 is super-fast)</p></li>
<li><p>strip_width is just the width of the strip down the middle. Can be 0.</p></li>
</ul>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.left_texture_update">
<span class="sig-name descname"><span class="pre">left_texture_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py property">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.mask_position_uv">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">mask_position_uv</span></span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.process_stim">
<span class="sig-name descname"><span class="pre">process_stim</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">y</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">theta</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Event handler method for processing message about current x,y, theta</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.right_texture_update">
<span class="sig-name descname"><span class="pre">right_texture_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.textures_update">
<span class="sig-name descname"><span class="pre">textures_update</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlParams.trs_transform">
<span class="sig-name descname"><span class="pre">trs_transform</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>trs = translate rotate scale transform for mask stage
rdb contributed to this code</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">InputControlStim</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex_classes</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_params</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">initial_tex_ind</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'InputControlStim'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">save_path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>Generic input-controll stimulus class: takes in list of texture classes, and stimulus parameters.
Stimulus shown, in real-time, depends on events produced by utils.Monitor() class.</p>
<dl class="simple">
<dt>Inputs:</dt><dd><dl class="simple">
<dt>Positional</dt><dd><p>tex_classes: m-element list of texture classes
stim_params: m-element list of dictionaries: each contains parameters (e.g., velocity)</p>
</dd>
<dt>Keyword </dt><dd><p>initial_tex_ind (0): index for first stim to show
window_size (512): size of the panda3d window (pixels)
window_name (‘InputControlStim’): title of window in gui
profile_on (False): will show actual fps, profiler, and little x at center if True
fps (30): controls frame rate of display
save_path (None): if set to a file path, will save data about stimuli, and time they are delivered</p>
</dd>
</dl>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.clear_cards">
<span class="sig-name descname"><span class="pre">clear_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Clear cards when new stimulus: stim-class sensitive</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.create_cards">
<span class="sig-name descname"><span class="pre">create_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create cards: these are panda3d objects that are required for displaying textures.
You can’t just have a disembodied texture. In pandastim (at least for now) we are
only showing 2d projections of textures, so we use cards.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.create_texture_stages">
<span class="sig-name descname"><span class="pre">create_texture_stages</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create the texture stages: these are basically textures that you can apply
to cards (sometimes mulitple textures at the same time – is useful with
masks).</p>
<p>For more on texture stages:
<a class="reference external" href="https://docs.panda3d.org/1.10/python/programming/texturing/multitexture-introduction">https://docs.panda3d.org/1.10/python/programming/texturing/multitexture-introduction</a></p>
</dd></dl>

<dl class="py property">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.current_stim_params">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">current_stim_params</span></span></dt>
<dd><p>Parameters of current texture (e.g., velocity, stim_type)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.move_textures">
<span class="sig-name descname"><span class="pre">move_textures</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Uses events from zmq to set the stimulus value.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.set_tasks">
<span class="sig-name descname"><span class="pre">set_tasks</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.set_texture_stages">
<span class="sig-name descname"><span class="pre">set_texture_stages</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Add texture stages to cards</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.set_title">
<span class="sig-name descname"><span class="pre">set_title</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">title</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.set_transforms">
<span class="sig-name descname"><span class="pre">set_transforms</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Set up the transforms to apply to textures/cards (e.g., rotations/scales)
This is different from the framewise movement handled by the task manager</p>
</dd></dl>

<dl class="py property">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.texture_size">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">texture_size</span></span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.InputControlStim.trs_transform">
<span class="sig-name descname"><span class="pre">trs_transform</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>trs = translate-rotate-scale transform for mask stage
panda3d developer rdb contributed to this code</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.KeyboardToggleTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">KeyboardToggleTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex_classes</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_params</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">save_path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>toggles between two textures based on keyboard inputs (0 and 1). Not set up
for binocular stim. Similar call to InputControlStim</p>
<dl class="py property">
<dt class="sig sig-object py" id="pandastim.stimuli.KeyboardToggleTex.current_stim_params">
<em class="property"><span class="pre">property</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">current_stim_params</span></span></dt>
<dd><p>returns parameters of current stimulus</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.KeyboardToggleTex.move_texture_task">
<span class="sig-name descname"><span class="pre">move_texture_task</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>The stimulus (texture) is set: now move it if needed.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.KeyboardToggleTex.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Called with relevant keyboard events</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.KeyboardToggleTex.set_title">
<span class="sig-name descname"><span class="pre">set_title</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">title</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.MonocularImprov">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">MonocularImprov</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">input_port</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">input_ip</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">output_port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">5008</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.StimulusSequencing" title="pandastim.stimuli.StimulusSequencing"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.StimulusSequencing</span></code></a></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.MonocularImprov.create_next_texture">
<span class="sig-name descname"><span class="pre">create_next_texture</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.MonocularImprov.move_monocular">
<span class="sig-name descname"><span class="pre">move_monocular</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">monocular_move_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.MonocularImprov.update_stimulus">
<span class="sig-name descname"><span class="pre">update_stimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">new_stimulus</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.OpenLoopStimulus">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">OpenLoopStimulus</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimuli</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.StimulusSequencing" title="pandastim.stimuli.StimulusSequencing"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.StimulusSequencing</span></code></a></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.OpenLoopStimulus.clear_cards">
<span class="sig-name descname"><span class="pre">clear_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.Scaling">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">Scaling</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_array</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scale</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>Show a single full-field texture that scales up or down in time, repeating.</p>
<p>Matt: this has not been rewritten for the refactor it will not work.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.Scaling.scaleTextureTask">
<span class="sig-name descname"><span class="pre">scaleTextureTask</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">StimulusSequencing</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimuli</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">defaults</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">save_path</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.clear_cards">
<span class="sig-name descname"><span class="pre">clear_cards</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.extract_texture_from_df">
<span class="sig-name descname"><span class="pre">extract_texture_from_df</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.format_window">
<span class="sig-name descname"><span class="pre">format_window</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.grating_creator">
<em class="property"><span class="pre">static</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">grating_creator</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">grating_params</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.grating_key_creator">
<em class="property"><span class="pre">static</span><span class="w"> </span></em><span class="sig-name descname"><span class="pre">grating_key_creator</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">stimulus</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">defaults</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">b</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.move_binocular">
<span class="sig-name descname"><span class="pre">move_binocular</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">binocular_move_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.move_monocular">
<span class="sig-name descname"><span class="pre">move_monocular</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">monocular_move_task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.save">
<span class="sig-name descname"><span class="pre">save</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.set_binocular">
<span class="sig-name descname"><span class="pre">set_binocular</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.set_monocular">
<span class="sig-name descname"><span class="pre">set_monocular</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.set_stimulus">
<span class="sig-name descname"><span class="pre">set_stimulus</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.set_transforms">
<span class="sig-name descname"><span class="pre">set_transforms</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.StimulusSequencing.trs_transform">
<span class="sig-name descname"><span class="pre">trs_transform</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>trs = translate-rotate-scale transform for mask stage
panda3d developer rdb contributed to this code</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.TexFixed">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">TexFixed</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">angle</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">30</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'ShowTexStatic'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.stimuli.TexMoving" title="pandastim.stimuli.TexMoving"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.stimuli.TexMoving</span></code></a></p>
<p>Presents single texture without any motion. Useful for debugging: no need to set fps high.</p>
<dl class="simple">
<dt>Usage:</dt><dd><p>tex = SinGreyTex()
stim_show = ShowTexStatic(tex, fps = 10, profile_on = True)
stim_show.run()</p>
</dd>
</dl>
</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.stimuli.TexMoving">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.stimuli.</span></span><span class="sig-name descname"><span class="pre">TexMoving</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">tex</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">angle</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">velocity</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fps</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">90</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'ShowTexMoving'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">window_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">profile_on</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.ShowBase.ShowBase</span></code></p>
<p>Shows single texture drifting across the window at specified velocity and angle.</p>
<dl class="simple">
<dt>Usage:</dt><dd><p>tex = SinGreyTex()
stim_show = ShowTexMoving(tex, angle = 30, velocity = 0.1, fps = 40, profile_on = True)
stim_show.run()</p>
</dd>
<dt>Note(s):</dt><dd><p>Positive angles are clockwise, negative ccw.
Velocity is normalized to window size, so 1.0 is the entire window width (i.e., super-fast).</p>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.stimuli.TexMoving.moveTextureTask">
<span class="sig-name descname"><span class="pre">moveTextureTask</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">task</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

</section>
<section id="module-pandastim.textures">
<span id="pandastim-textures-module"></span><h2>pandastim.textures module</h2>
<p>pandastim/textures.py
Texture classes defined for display in ShowBase stimulus classes.</p>
<p>Part of pandastim package: <a class="reference external" href="https://github.com/EricThomson/pandastim">https://github.com/EricThomson/pandastim</a></p>
<p>First defines the abstract base class, TextureBase. This defines the attributes
of the textures, but leaves <cite>create_texture</cite> undefined, to be implemented
in each subclass as a numpy array that looks how you want.</p>
<p>Component types (texture data types in panda3d):
<a class="reference external" href="https://www.panda3d.org/reference/python/classpanda3d_1_1core_1_1Texture.html#a81f78fc173dedefe5a049c0aa3eed2c0">https://www.panda3d.org/reference/python/classpanda3d_1_1core_1_1Texture.html#a81f78fc173dedefe5a049c0aa3eed2c0</a></p>
<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.BlankTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">BlankTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'blank_tex'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Grayscale 2d square wave (grating)</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.BlankTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.BlankTexXY">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">BlankTexXY</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(512,</span> <span class="pre">512)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'blank_tex'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBaseXY" title="pandastim.textures.TextureBaseXY"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBaseXY</span></code></a></p>
<p>Grayscale 2d square wave (grating)</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.BlankTexXY.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.CalibrationTriangles">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">CalibrationTriangles</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(1024,</span> <span class="pre">1024)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'circs'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tri_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">50</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">circle_radius</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">7</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">x_off</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">500</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">y_off</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBaseXY" title="pandastim.textures.TextureBaseXY"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBaseXY</span></code></a></p>
<p>Filled circle: grayscale on grayscale with circle_radius, centered at circle_center
with face color fg_intensity on background bg_intensity. Center position is in pixels
from center of image.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.CalibrationTriangles.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.CalibrationTriangles.projct_coords">
<span class="sig-name descname"><span class="pre">projct_coords</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.CircleGrayTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">CircleGrayTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'gray_circle'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">circle_center</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">0)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">circle_radius</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">100</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bg_intensity</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fg_intensity</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">255</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Filled circle: grayscale on grayscale with circle_radius, centered at circle_center
with face color fg_intensity on background bg_intensity. Center position is in pixels
from center of image.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.CircleGrayTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.GratingGrayTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">GratingGrayTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'grating_gray'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">spatial_frequency</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Grayscale 2d square wave (grating)</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.GratingGrayTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.GratingGrayTexXY">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">GratingGrayTexXY</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(512,</span> <span class="pre">512)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'grating_gray'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">spatial_frequency</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">dark_val</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">light_val</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">255</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBaseXY" title="pandastim.textures.TextureBaseXY"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBaseXY</span></code></a></p>
<p>Grayscale 2d square wave (grating)</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.GratingGrayTexXY.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.GratingRgbTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">GratingRgbTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'grating_rgb'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">spatial_frequency</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(255,</span> <span class="pre">0,</span> <span class="pre">0)</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Rgb 2d square wave (grating) stimulus class (goes from black to rgb val)
To do:</p>
<blockquote>
<div><p>Could make it alternate b/w two rgb values.</p>
</div></blockquote>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.GratingRgbTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.RadialSinCube">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">RadialSinCube</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(1024,</span> <span class="pre">1024)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">phase</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">period</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">32</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'radial_sin_centering'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBaseXY" title="pandastim.textures.TextureBaseXY"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBaseXY</span></code></a></p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.RadialSinCube.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.RgbTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">RgbTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'rgb_field'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(0,</span> <span class="pre">255,</span> <span class="pre">0)</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Full field at given color (e.g., a red card).</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.RgbTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.SinGrayTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">SinGrayTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'sin_gray'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">spatial_frequency</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Grayscale sinusoidal grating texture.</p>
<dl class="simple">
<dt>To do:</dt><dd><p>Currently doesn’t handle phase or contrast (usually handled by ShowBase)</p>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.SinGrayTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.SinRgbTex">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">SinRgbTex</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'sin_rgb'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">spatial_frequency</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">10</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(255,</span> <span class="pre">0,</span> <span class="pre">0)</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <a class="reference internal" href="#pandastim.textures.TextureBase" title="pandastim.textures.TextureBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">pandastim.textures.TextureBase</span></code></a></p>
<p>Sinusoid that goes from black to the given rgb value.</p>
<dl class="simple">
<dt>To do:</dt><dd><p>Currently doesn’t handle phase, contrast 
Would be nice to have it cycle between two different colors, not just rgb/black.</p>
</dd>
</dl>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.SinRgbTex.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.TextureBase">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">TextureBase</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">512</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'stimulus'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>Base class for stimuli: subclass this when making specific stimuli.
You need to implement the create_texture() method, and any parameters
needed for the texture function.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.TextureBase.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.TextureBase.view">
<span class="sig-name descname"><span class="pre">view</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Plot the texture using matplotlib. Useful for debugging.</p>
</dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.textures.TextureBaseXY">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.textures.</span></span><span class="sig-name descname"><span class="pre">TextureBaseXY</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">(512,</span> <span class="pre">512)</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">texture_name</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'stimulus'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>Base class for all XY stimuli: subclass this when making specific stimuli.
You need to implement the create_texture() method, and any parameters
needed for the texture function. These support non-square shaped windows and textures</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.TextureBaseXY.create_texture">
<span class="sig-name descname"><span class="pre">create_texture</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create 2d numpy array for stimulus: either nxmx1 (grayscale) or nxm x 3 (rgb)</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.textures.TextureBaseXY.view">
<span class="sig-name descname"><span class="pre">view</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Plot the texture using matplotlib. Useful for debugging.</p>
</dd></dl>

</dd></dl>

</section>
<section id="module-pandastim.utils">
<span id="pandastim-utils-module"></span><h2>pandastim.utils module</h2>
<p>pandastim/utils.py
Helper functions used in multiple classes in stimulu/textures</p>
<p>Part of pandastim package: <a class="reference external" href="https://github.com/EricThomson/pandastim">https://github.com/EricThomson/pandastim</a></p>
<dl class="py class">
<dt class="sig sig-object py" id="pandastim.utils.Emitter">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">Emitter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x_vals</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">y_vals</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">theta_vals</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">period</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.2</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pause</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.DirectObject.DirectObject</span></code></p>
<p>Given three lists (x, y, theta): 
emit the xytheta values in the list with period seconds betwween them, pause, and repeat.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Emitter.kill">
<span class="sig-name descname"><span class="pre">kill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Emitter.run">
<span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.utils.Monitor">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">Monitor</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">subscriber</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.DirectObject.DirectObject</span></code></p>
<p>Use a subscriber to continuously monitor publisher, and
emit messages for the panda3d event handler.</p>
<p>This is used for closed-loop stimuli.</p>
<p>Matt: this is a working hack : see working/monitor_notes.txt.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Monitor.kill">
<span class="sig-name descname"><span class="pre">kill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Monitor.run">
<span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.utils.MonitorDataPass">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">MonitorDataPass</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">subscriber</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">subscriber2</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">direct.showbase.DirectObject.DirectObject</span></code></p>
<p>this monitor passes the data through to pandas</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.MonitorDataPass.kill">
<span class="sig-name descname"><span class="pre">kill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.MonitorDataPass.run">
<span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.MonitorDataPass.run2">
<span class="sig-name descname"><span class="pre">run2</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.utils.Publisher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">Publisher</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'1234'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>Publisher wrapper class for zmq.</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Publisher.kill">
<span class="sig-name descname"><span class="pre">kill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="pandastim.utils.Subscriber">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">Subscriber</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'1234'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">topic</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">''</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ip</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>Subscriber wrapper class for zmq.
Default topic is every topic (“”).</p>
<dl class="py method">
<dt class="sig sig-object py" id="pandastim.utils.Subscriber.kill">
<span class="sig-name descname"><span class="pre">kill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.angle_diff">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">angle_diff</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">a1</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">a2</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>correct calculaion of difference of two angles (radians)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.angle_mean">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">angle_mean</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">angles</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">axis</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Correct calculation of a mean of an array of angles</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.card2uv">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">card2uv</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">val</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>from model (card) -based normalized device coordinates (-1,-1 bottom left, 1,1 top right)
appropriate for cards to texture-based uv-coordinates.</p>
<dl class="simple">
<dt>For more on these different coordinate systems for textures:</dt><dd><p><a class="reference external" href="https://docs.panda3d.org/1.10/python/programming/texturing/simple-texturing">https://docs.panda3d.org/1.10/python/programming/texturing/simple-texturing</a></p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.create_radial_sin">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">create_radial_sin</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">texture_size</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.get_calibration_params">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">get_calibration_params</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.grating_byte">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">grating_byte</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">X</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">freq</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Unsigned 8 bit representation of a grating (square wave)</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.img_receiver">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">img_receiver</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">socket</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.port_provider">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">port_provider</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>returns a random free port on PC</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.reduce_to_pi">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">reduce_to_pi</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">ar</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Reduce angles to the -pi to pi range</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.save_initialize">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">save_initialize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file_path</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tex_classes</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stim_params</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Initializes saving: saves texture classes and params for 
input-coupled stimulus classes.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.sequence_runner">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">sequence_runner</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">df</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'5005'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">listening_port</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'5006'</span></span></em><span class="sig-paren">)</span></dt>
<dd></dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.sin_byte">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">sin_byte</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">X</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">freq</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Creates unsigned 8 bit representation of sin (T_unsigned_Byte).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.updated_saving">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">updated_saving</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file_path</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fish_id</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">fish_age</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Initializes saving: saves texture classes and params for
input-coupled stimulus classes.</p>
<p>Updated from earlier – dont remember why different</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="pandastim.utils.uv2card">
<span class="sig-prename descclassname"><span class="pre">pandastim.utils.</span></span><span class="sig-name descname"><span class="pre">uv2card</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">val</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Transform from texture-based uv-coordinates to card-based normalized device coordinates</p>
</dd></dl>

</section>
<section id="module-pandastim">
<span id="module-contents"></span><h2>Module contents</h2>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>